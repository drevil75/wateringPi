openapi: 3.0.3
info:
  title: Swagger Garden Watering Control - OpenAPI 3.0
  description: |-
    This is a REST-API to control watering valves or better GPIO-Ports on a raspberry pi
  termsOfService: http://swagger.io/terms/
  contact:
    email: xdev@e.mail.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://wolke:8080/api/v3
- url: http://localhost:8080/api/v3
tags:
- name: port
  description: Everything about your Ports
  externalDocs:
    description: Find out more
    url: http://localhost:8080
- name: config
  description: config of your Ports
  externalDocs:
    description: Find out more
    url: http://localhost:8080
paths:
  /port/{portId}:
    get:
      tags:
      - port
      summary: Find port by ID
      description: Returns the status of a single port
      operationId: getPortById
      parameters:
      - name: portId
        in: path
        description: ID of port to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
        "400":
          description: Invalid ID supplied
        "404":
          description: Port not found
      x-swagger-router-controller: gpio
    post:
      tags:
      - port
      summary: Updates a port status
      description: ""
      operationId: updatePort
      parameters:
      - name: portId
        in: path
        description: ID of port that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        description: Status of port that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
        "400":
          description: Invalid ID supplied
        "404":
          description: Port not found
        "405":
          description: Invalid input
      x-swagger-router-controller: gpio
  /config/{portId}:
    post:
      tags:
      - config
      summary: Updates a port status
      description: ""
      operationId: configPort
      parameters:
      - name: portId
        in: path
        description: ID of port that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        description: Status of port that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mode
        in: query
        description: mode of the port (in or out)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: name of the port (string)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
        "400":
          description: Invalid ID supplied
        "404":
          description: Port not found
        "405":
          description: Invalid input
      x-swagger-router-controller: gpio
components:
  schemas:
  
    Port:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: green house
        status:
          type: string
          description: port status
          enum:
          - online
          - offline
          - unknown
        mode:
          type: string
          description: port mode
          enum:
          - in
          - out
      example:
        name: green house
        id: 10
        status: online
        mode: in
# -----------------------------------------
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
  # -----------------------------------------
  requestBodies:
    Port:
      description: Port object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Port'